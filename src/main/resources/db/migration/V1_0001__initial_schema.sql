CREATE SCHEMA IF NOT EXISTS BOOKSTORE;

CREATE TABLE IF NOT EXISTS BOOKSTORE.CLIENT_DETAIL (
    id UUID PRIMARY KEY,
    client_id VARCHAR(250) NOT NULL,
    secret VARCHAR(250) NOT NULL
);

CREATE TABLE IF NOT EXISTS BOOKSTORE.ACCOUNT_DETAIL (
    id UUID PRIMARY KEY,
    email VARCHAR(100) UNIQUE NOT NULL,
    password VARCHAR(250) NOT NULL,
    status VARCHAR(32) NOT NULL
);

CREATE TABLE IF NOT EXISTS BOOKSTORE.USER_DETAIL (
    id UUID PRIMARY KEY,
    account_id UUID NOT NULL REFERENCES BOOKSTORE.ACCOUNT_DETAIL(id),
    first_name VARCHAR(250) NOT NULL,
    last_name VARCHAR(250) NOT NULL,
    mobile_number VARCHAR(30)
);

CREATE TABLE IF NOT EXISTS BOOKSTORE.ACCOUNT_CONFIGURATION (
    id UUID PRIMARY KEY,
    account_id UUID NOT NULL UNIQUE REFERENCES BOOKSTORE.ACCOUNT_DETAIL(id),
    display_currency varchar(3)
);

CREATE TABLE IF NOT EXISTS BOOKSTORE.ADDRESS (
    id UUID PRIMARY KEY,
    user_id UUID NOT NULL REFERENCES BOOKSTORE.USER_DETAIL(id),
    address_type VARCHAR(16) NOT NULL,
    address_line1 VARCHAR(250) NOT NULL,
    address_line2 VARCHAR(250) NOT NULL,
    city VARCHAR(50) NOT NULL,
    country VARCHAR(50) NOT NULL,
    post_code VARCHAR(8) NOT NULL
);

CREATE TABLE IF NOT EXISTS BOOKSTORE.PERMISSION_GROUP (
    id UUID PRIMARY KEY,
    name VARCHAR(64) UNIQUE NOT NULL,
    description text
);

CREATE TABLE IF NOT EXISTS BOOKSTORE.PERMISSION (
    id UUID PRIMARY KEY,
    name VARCHAR(64) UNIQUE NOT NULL,
    description text
);

CREATE TABLE IF NOT EXISTS BOOKSTORE.PERMISSION_GROUP_PERMISSIONS (
    permission_group_id UUID NOT NULL REFERENCES BOOKSTORE.PERMISSION_GROUP(id),
    permission_id UUID NOT NULL REFERENCES BOOKSTORE.PERMISSION(id),
    CONSTRAINT permission_group_permission_unique UNIQUE (permission_group_id, permission_id)
);

CREATE TABLE IF NOT EXISTS BOOKSTORE.ACCOUNT_PERMISSIONS (
    account_id UUID NOT NULL REFERENCES BOOKSTORE.ACCOUNT_DETAIL(id),
    permission_id UUID NOT NULL REFERENCES BOOKSTORE.PERMISSION(id),
    CONSTRAINT account_permission_unique unique (account_id, permission_id)
);

CREATE TABLE IF NOT EXISTS BOOKSTORE.ACCOUNT_PERMISSION_GROUPS (
    account_id UUID NOT NULL REFERENCES BOOKSTORE.ACCOUNT_DETAIL(id),
    permission_group_id UUID NOT NULL REFERENCES BOOKSTORE.PERMISSION_GROUP(id),
    CONSTRAINT account_permission_group_unique unique (account_id, permission_group_id)
);

CREATE TABLE IF NOT EXISTS BOOKSTORE.AUTHOR (
    id UUID PRIMARY KEY,
    deleted BOOLEAN NOT NULL,
    first_name VARCHAR(250) NOT NULL,
    last_name VARCHAR(250) NOT NULL
);

CREATE TABLE IF NOT EXISTS BOOKSTORE.BOOK (
    id UUID PRIMARY KEY,
    deleted BOOLEAN NOT NULL,
    author_id UUID NOT NULL REFERENCES BOOKSTORE.AUTHOR(id),
    name VARCHAR(250) NOT NULL,
    stock NUMERIC(4, 0) NOT NULL,
    price NUMERIC(6,2) NOT NULL
);

CREATE TABLE IF NOT EXISTS BOOKSTORE.PURCHASE_ORDER (
    id UUID PRIMARY KEY,
    date_time TIMESTAMP WITHOUT TIME ZONE NOT NULL,
    order_status VARCHAR(250) NOT NULL
);

CREATE TABLE IF NOT EXISTS BOOKSTORE.ORDER_ENTRY (
    id UUID PRIMARY KEY,
    purchase_order_id UUID NOT NULL REFERENCES BOOKSTORE.PURCHASE_ORDER(id),
    book_id UUID NOT NULL REFERENCES BOOKSTORE.BOOK(ID),
    quantity INTEGER NOT NULL,
    final_unit_price NUMERIC(6,2),
    CONSTRAINT ORDER_ID_BOOK_ID_UNIQUE UNIQUE (purchase_order_id, book_id)
);